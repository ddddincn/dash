// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injection

import (
	"dash/cache"
	"dash/config"
	"dash/controller"
	"dash/controller/handler"
	"dash/controller/middleware"
	"dash/dal"
	"dash/log"
	"dash/service/assembler"
	"dash/service/impl"
)

// Injectors from wire.go:

// InitializeApp 初始化应用程序的依赖注入
// 使用 Wire 框架自动生成依赖注入代码
// 返回值: 配置好的服务器实例
func NewDashServer() *controller.Server {
	configConfig := config.NewConfig()
	logger := log.NewLogger(configConfig)
	loggerInterface := log.NewGormLogger(configConfig, logger)
	db := dal.NewGormDB(configConfig, loggerInterface)
	redisCache := cache.NewRedisCache(configConfig, logger)
	optionService := impl.NewOptionService(configConfig, logger)
	oneTimeTokenService := impl.NewOneTimeTokenService()
	userService := impl.NewUserService()
	authMiddleware := middleware.NewAuthMiddleware(optionService, oneTimeTokenService, userService)
	basePostService := impl.NewBasePostService(optionService)
	postService := impl.NewPostService(basePostService, optionService)
	tagService := impl.NewTagService(optionService, db)
	postTagService := impl.NewPostTagService(tagService, db)
	categoryService := impl.NewCategoryService(optionService)
	postCategoryService := impl.NewPostCategoryService(categoryService, db)
	basePostAssembler := assembler.NewBasePostAssembler(basePostService, optionService)
	postAssembler := assembler.NewPostAssembler(postService, postTagService, tagService, postCategoryService, categoryService, basePostAssembler)
	postHandler := handler.NewPostHandler(optionService, postService, postAssembler)
	categoryHandler := handler.NewCategoryHandler(optionService, categoryService, postService, postCategoryService, postAssembler)
	tagHandler := handler.NewTagHandler(optionService, tagService, postService, postTagService, postAssembler)
	statisticsHandler := handler.NewStatisticsHandler(postService, tagService, categoryService, optionService)
	themeService := impl.NewThemeService()
	themeHandler := handler.NewThemeHandler(optionService, userService, themeService)
	menuService := impl.NewMenuService()
	menuHandler := handler.NewMenuHandler(menuService)
	adminService := impl.NewAdminService(userService)
	jwtService := impl.NewJWTService(optionService)
	adminHandler := handler.NewAdminHandler(adminService, jwtService)
	installService := impl.NewInstallService(optionService, userService, categoryService, postService, menuService)
	installHandler := handler.NewInstallHandler(installService, optionService)
	server := controller.NewServer(configConfig, logger, db, redisCache, authMiddleware, postHandler, categoryHandler, tagHandler, statisticsHandler, themeHandler, menuHandler, adminHandler, installHandler)
	return server
}
