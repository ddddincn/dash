// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Category     *category
	Menu         *menu
	Option       *option
	Post         *post
	PostCategory *postCategory
	PostTag      *postTag
	Tag          *tag
	ThemeSetting *themeSetting
	User         *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Category = &Q.Category
	Menu = &Q.Menu
	Option = &Q.Option
	Post = &Q.Post
	PostCategory = &Q.PostCategory
	PostTag = &Q.PostTag
	Tag = &Q.Tag
	ThemeSetting = &Q.ThemeSetting
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Category:     newCategory(db, opts...),
		Menu:         newMenu(db, opts...),
		Option:       newOption(db, opts...),
		Post:         newPost(db, opts...),
		PostCategory: newPostCategory(db, opts...),
		PostTag:      newPostTag(db, opts...),
		Tag:          newTag(db, opts...),
		ThemeSetting: newThemeSetting(db, opts...),
		User:         newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Category     category
	Menu         menu
	Option       option
	Post         post
	PostCategory postCategory
	PostTag      postTag
	Tag          tag
	ThemeSetting themeSetting
	User         user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Category:     q.Category.clone(db),
		Menu:         q.Menu.clone(db),
		Option:       q.Option.clone(db),
		Post:         q.Post.clone(db),
		PostCategory: q.PostCategory.clone(db),
		PostTag:      q.PostTag.clone(db),
		Tag:          q.Tag.clone(db),
		ThemeSetting: q.ThemeSetting.clone(db),
		User:         q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Category:     q.Category.replaceDB(db),
		Menu:         q.Menu.replaceDB(db),
		Option:       q.Option.replaceDB(db),
		Post:         q.Post.replaceDB(db),
		PostCategory: q.PostCategory.replaceDB(db),
		PostTag:      q.PostTag.replaceDB(db),
		Tag:          q.Tag.replaceDB(db),
		ThemeSetting: q.ThemeSetting.replaceDB(db),
		User:         q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Category     *categoryDo
	Menu         *menuDo
	Option       *optionDo
	Post         *postDo
	PostCategory *postCategoryDo
	PostTag      *postTagDo
	Tag          *tagDo
	ThemeSetting *themeSettingDo
	User         *userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Category:     q.Category.WithContext(ctx),
		Menu:         q.Menu.WithContext(ctx),
		Option:       q.Option.WithContext(ctx),
		Post:         q.Post.WithContext(ctx),
		PostCategory: q.PostCategory.WithContext(ctx),
		PostTag:      q.PostTag.WithContext(ctx),
		Tag:          q.Tag.WithContext(ctx),
		ThemeSetting: q.ThemeSetting.WithContext(ctx),
		User:         q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
